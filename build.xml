<?xml version="1.0"?>
<!--
  ~ The MIT License
  ~
  ~ Copyright (c) 2009 The Broad Institute
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->

<project name="picard-public" basedir="." default="all">

    <property name="src" value="src/java"/>
    <property name="src.scripts" value="src/scripts"/>
    <property name="src.test" value="src/tests"/>
    <property name="lib" value="lib"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="classes.test" value="testclasses"/>
    <property name="scripts" value="src/scripts"/>
    <property name="test.output" value="dist/test"/>
    <property name="javac.debug" value="true"/>
    <property name="sam-version" value="1.55"/>
    <property name="picard-version" value="1.55"/>
    <property name="command_tmp" value=".command_tmp"/>
    <property name="command-line-html-dir" value="${dist}/html"/>
    <property name="testng.verbosity" value="2"/>

    <property environment="env"/>

    <condition  property="isUnix">
        <os family="unix"/>
    </condition>
    <target name="set_excluded_test_groups_unix" if="isUnix">
        <property name="excludedTestGroups" value="slow, broken"/>
    </target>
    <target name="set_excluded_test_groups_non_unix" unless="isUnix">
        <property name="excludedTestGroups" value="slow, broken, unix"/>
    </target>
    <target name="set_excluded_test_groups" depends="set_excluded_test_groups_unix,set_excluded_test_groups_non_unix"/>

<!-- INIT -->
    <target name="init">
        <path id="classpath">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <path  id="metrics.classpath">
            <pathelement path="${classpath}"/>
            <pathelement location="${classes}"/>
        </path>
    </target>

<!-- CLEAN -->
    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${classes.test}"/>
        <delete dir="${test.output}"/>
        <delete  dir="${dist}"/>
        <delete  dir="${command_tmp}"/>
        <delete  dir="javadoc"/>
    </target>

<!-- COMPILE -->
    <target name="compile" depends="compile-src, compile-tests"
            description="Compile files without cleaning">
    </target>

    <target name="compile-src" depends="compile-sam-jdk, compile-picard" description="Compile files without cleaning"/>

    <target name="compile-sam-jdk" depends="init" description="Compile sam-jdk files without cleaning">
        <mkdir dir="${classes}"/>
        <!-- complain if net.sf.picard code is referenced -->
        <javac destdir="${classes}"
               optimize="${javac.opt}"
               debug="${javac.debug}"
               sourcepath="" srcdir="${src}"
               includes ="net/sf/samtools/**/*.*"
               excludes = "net/sf/picard/**/*.*">
            <!--<compilerarg value="-Xlint:all"/>-->
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="compile-picard" depends="init" description="Compile picard files without cleaning">
        <mkdir dir="${classes}"/>
        <javac destdir="${classes}"
               optimize="${javac.opt}"
               excludes ="net/sf/samtools/**/*.*"
               debug="${javac.debug}">
            <!--<compilerarg value="-Xlint:all"/>-->
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src}"/>
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="compile-tests" depends="compile-sam-jdk-tests, compile-picard-tests" description="Compile test files without cleaning"/>

    <target name="compile-sam-jdk-tests" depends="init" description="Compile sam-jdk test files without cleaning">
        <mkdir dir="${classes.test}"/>
        <javac destdir="${classes.test}"
               optimize="${javac.opt}"
               debug="${javac.debug}"
               includes ="net/sf/samtools/**/*.*">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src.test}"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-picard-tests" depends="init" description="Compile picard test files without cleaning">
        <mkdir dir="${classes.test}"/>
        <javac destdir="${classes.test}"
               optimize="${javac.opt}"
               excludes ="net/sf/samtools/**/*.*"
               debug="${javac.debug}">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src.test}"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes}"/>
            </classpath>
        </javac>
        <copy todir="${classes.test}/">
            <fileset dir="${src.test}/scripts" includes="**/*"/>
        </copy>
    </target>

<!-- TEST -->
    <target name="test" depends="compile, set_excluded_test_groups" description="Run unit tests">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <testng suitename="picard-tests" classpathref="classpath" outputdir="${test.output}"
                failureproperty="tests.failed" excludedgroups="${excludedTestGroups}" workingDir="${basedir}"
                 verbose="${testng.verbosity}">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                 <include name="**/Test*.class"/>
                 <include name="**/*Test.class"/>
            </classfileset>
            <jvmarg value="-Xmx1G"/>
        </testng>
        <junitreport todir="${dist}/test" >
            <fileset dir="${test.output}">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="${dist}/test" styledir="etc/test"/>
        </junitreport>
        <copy file="etc/test/testng.css" todir="${dist}/test" overwrite="true"/>
        <fail if="tests.failed" message="There were failed unit tests"/>
    </target>

    <target name="single-test"
            depends="compile, compile-tests"
            description="Compile and run a single test.">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <fail unless="name" message="Please provide input test: -Dname=..." />
        <testng suitename="samtools-single-test" classpathref="classpath" outputdir="${test.output}"
                verbose="${testng.verbosity}">
            <jvmarg line="-Xmx512M"/>
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/${name}.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="sam-jar" depends="compile-sam-jdk"
            description="Builds sam-${sam-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/sam-${sam-version}.jar" compress="no">
            <fileset dir="${classes}" includes ="net/sf/samtools/**/*.*"/>
        </jar>
    </target>

    <target name="picard-jar" depends="compile"
            description="Builds picard-${picard-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/picard-${picard-version}.jar" compress="no">
            <fileset dir="${classes}" includes ="net/sf/picard/**/*.*"/>
            <zipfileset src="${lib}/apache-ant-1.8.2-bzip2.jar"/>
        </jar>
    </target>

    <target name="javadoc" depends="init" description="Generates the project javadoc.">
        <javadoc
                sourcepath="${src}"
                destdir="javadoc"
                packagenames="net.sf.samtools.*, net.sf.picard.*"
                windowtitle="SAM JDK API Documentation"
                doctitle="&lt;h1&gt;SAM JDK API Documentation&lt;/h1&gt;"
                author="true"
                protected="true"
                use="true"
                version="true"
                failonerror="true">
            <classpath location="${java.home}/../lib/tools.jar"/>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
        <mkdir dir="${command-line-html-dir}"/>
        <javadoc sourcepath="${src}/java"
                 doclet="net.sf.picard.util.MetricsDoclet"
                 docletpathref="metrics.classpath"
                 classpathref="metrics.classpath"
                 failonerror="true">
            <sourcepath path="${src}"/>
            <arg line="-f ${command-line-html-dir}/picard-metric-definitions.shtml"/>
        </javadoc>
    </target>

    <target name="package-commands" depends="compile, sam-jar, picard-jar">
        <delete dir="${command_tmp}"/>

        <mkdir dir="${command_tmp}"/>
        <copy todir="${command_tmp}">
            <fileset dir="${classes}" includes="**/*"/>
        </copy>

        <unzip dest=".command_tmp">
            <fileset dir="${lib}">
                <include  name="*.jar"/>
            </fileset>
        </unzip>
        <delete dir="${command-line-html-dir}"/>

        <!-- The order of these elements determines the order they appear in the on-line help -->
        <!-- If you don't want to generate on-line doc for a command, use package-command instead of package-and-document-command -->
        <package-and-document-command title="AddOrReplaceReadGroups"         main-class="net.sf.picard.sam.AddOrReplaceReadGroups"/>
        <package-and-document-command title="BamToBfq"                       main-class="net.sf.picard.fastq.BamToBfq"/>
        <package-and-document-command title="BamIndexStats"                  main-class="net.sf.picard.sam.BamIndexStats"/>
        <package-and-document-command title="BuildBamIndex"                  main-class="net.sf.picard.sam.BuildBamIndex"/>
        <package-and-document-command title="CalculateHsMetrics"             main-class="net.sf.picard.analysis.directed.CalculateHsMetrics"/>
        <package-and-document-command title="CleanSam"                       main-class="net.sf.picard.sam.CleanSam"/>
        <package-and-document-command title="CollectAlignmentSummaryMetrics" main-class="net.sf.picard.analysis.CollectAlignmentSummaryMetrics"/>
        <package-and-document-command title="CollectGcBiasMetrics"           main-class="net.sf.picard.analysis.CollectGcBiasMetrics"/>
        <package-and-document-command title="CollectInsertSizeMetrics"       main-class="net.sf.picard.analysis.CollectInsertSizeMetrics"/>
        <package-and-document-command title="CollectMultipleMetrics"         main-class="net.sf.picard.analysis.CollectMultipleMetrics"/>
        <package-and-document-command title="CollectRnaSeqMetrics"           main-class="net.sf.picard.analysis.CollectRnaSeqMetrics"/>
        <package-and-document-command title="CompareSAMs"                    main-class="net.sf.picard.sam.CompareSAMs"/>
        <package-and-document-command title="CreateSequenceDictionary"       main-class="net.sf.picard.sam.CreateSequenceDictionary"/>
        <package-and-document-command title="DownsampleSam"                  main-class="net.sf.picard.sam.DownsampleSam"/>
        <package-and-document-command title="ExtractIlluminaBarcodes"        main-class="net.sf.picard.illumina.ExtractIlluminaBarcodes"/>
        <package-and-document-command title="EstimateLibraryComplexity"      main-class="net.sf.picard.sam.EstimateLibraryComplexity"/>
        <package-and-document-command title="FastqToSam"                     main-class="net.sf.picard.sam.FastqToSam"/>
        <package-and-document-command title="FixMateInformation"             main-class="net.sf.picard.sam.FixMateInformation"/>
        <package-and-document-command title="IlluminaBasecallsToSam"         main-class="net.sf.picard.illumina.IlluminaBasecallsToSam"/>
        <package-and-document-command title="IntervalListTools"              main-class="net.sf.picard.util.IntervalListTools"/>
        <package-and-document-command title="MarkDuplicates"                 main-class="net.sf.picard.sam.MarkDuplicates"/>
        <package-and-document-command title="MeanQualityByCycle"             main-class="net.sf.picard.analysis.MeanQualityByCycle"/>
        <package-and-document-command title="MergeBamAlignment"              main-class="net.sf.picard.sam.MergeBamAlignment"/>
        <package-and-document-command title="MergeSamFiles"                  main-class="net.sf.picard.sam.MergeSamFiles"/>
        <package-and-document-command title="NormalizeFasta"                 main-class="net.sf.picard.reference.NormalizeFasta"/>
        <package-and-document-command title="ExtractSequences"               main-class="net.sf.picard.reference.ExtractSequences"/>
        <package-and-document-command title="QualityScoreDistribution"       main-class="net.sf.picard.analysis.QualityScoreDistribution"/>
        <package-and-document-command title="ReorderSam" id=""               main-class="net.sf.picard.sam.ReorderSam"/>
        <package-and-document-command title="ReplaceSamHeader"               main-class="net.sf.picard.sam.ReplaceSamHeader"/>
        <package-and-document-command title="RevertSam"                      main-class="net.sf.picard.sam.RevertSam"/>
        <package-and-document-command title="SamFormatConverter"             main-class="net.sf.picard.sam.SamFormatConverter"/>
        <package-and-document-command title="SamToFastq"                     main-class="net.sf.picard.sam.SamToFastq"/>
        <package-and-document-command title="SortSam"                        main-class="net.sf.picard.sam.SortSam"/>
        <package-and-document-command title="ValidateSamFile"                main-class="net.sf.picard.sam.ValidateSamFile"/>
        <package-and-document-command title="ViewSam"                        main-class="net.sf.picard.sam.ViewSam"/>
    </target>

<!-- ALL -->
    <target name="all" depends="compile, sam-jar, picard-jar, package-commands, document-standard-options" description="Default build target">
        <zip zipfile="${dist}/picard-tools-${picard-version}.zip">
            <zipfileset dir="${dist}" includes="*.jar" prefix="picard-tools-${picard-version}"/>
            <zipfileset dir="${lib}" includes="snappy*.jar"/>
        </zip>
    </target>

    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->
    <!-- Beginning of taskdefs that are used elsewhere in the build file                        -->
    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->

    <!-- Create a jar for a command-line class so it can be run java -jar jarfile -->
    <macrodef name="package-command">
        <attribute name="main-class"/>
        <attribute name="title"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <classfileset dir="${command_tmp}" id="reqdClasses">
                <root classname="@{main-class}"/>
            </classfileset>
            <jar destfile="${dist}/@{title}.jar">
                <fileset  refid="reqdClasses"/>
                <fileset dir="${src.scripts}" includes="**/*.R"/>
                <fileset dir="${command_tmp}" includes="org/xerial/snappy/native/Linux/**/*"/>
                <fileset dir="${command_tmp}" includes="org/xerial/snappy/VERSION"/>
                <fileset dir="${command_tmp}" includes="META-INF/maven/org.xerial.snappy/snappy-java/pom.properties"/>
                <manifest>
                    <attribute name="Implementation-Title" value="@{title}"/>
                    <attribute name="Main-Class" value="@{main-class}"/>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

    <target name="document-standard-options" depends="picard-jar, sam-jar">
        <sequential>
            <!-- For Sourceforge project website -->
            <mkdir dir="${command-line-html-dir}/program_usage"/>

            <!-- Generate HTML for each command -->
            <java classname="net.sf.picard.cmdline.CreateHtmlDocForStandardOptions"
                  output="${command-line-html-dir}/program_usage/standard-options.shtml"
                  failonerror="true">
                <classpath>
                    <pathelement location="${dist}/picard-${picard-version}.jar"/>
                    <pathelement location="${dist}/sam-${sam-version}.jar"/>
                </classpath>
            </java>
        </sequential>
    </target>

    <!-- generate HTML documentation for command-line program -->
    <macrodef name="document-command">
        <attribute name="main-class"/>
        <attribute name="title"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <!-- For Sourceforge project website -->
            <mkdir dir="${command-line-html-dir}/program_usage"/>

            <!-- Generate HTML for each command -->
            <java classname="net.sf.picard.cmdline.CreateHtmlDocForProgram"
                  output="${command-line-html-dir}/program_usage/@{title}.shtml"
                  failonerror="true">
                <classpath>
                    <pathelement location="${dist}/picard-${picard-version}.jar"/>
                    <pathelement location="${dist}/sam-${sam-version}.jar"/>
                </classpath>
                <arg value="@{main-class}"/>
            </java>

            <!-- Generate links to each command -->
            <echo file="${command-line-html-dir}/command-line-sidebar.shtml" append="true"
                  message="&lt;li>&lt;a href=&quot;command-line-overview.shtml#@{title}&quot;>@{title}&lt;/a>${line.separator}"/>

            <!-- include usage for each command -->
            <echo  file="${command-line-html-dir}/command-line-usage.shtml" append="true"
                    message="&lt;!--#include virtual=&quot;@{title}.shtml&quot; -->${line.separator}"/>
        </sequential>
    </macrodef>

    <!-- Create a jar for a command-line class so it can be run java -jar jarfile, and generate on-line doc for it. -->
    <macrodef name="package-and-document-command">
        <attribute name="main-class"/>
        <attribute name="title"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <package-command title="@{title}" main-class="@{main-class}"/>
            <document-command title="@{title}" main-class="@{main-class}"/>
        </sequential>
    </macrodef>

</project>
