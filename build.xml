<?xml version="1.0"?>
<!--
  ~ The MIT License
  ~
  ~ Copyright (c) 2009 The Broad Institute
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->

<project name="picard-public" basedir="." default="all">

    <property name="src" value="src/java"/>
    <property name="src.test" value="src/tests"/>
    <property name="lib" value="lib"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="classes.test" value="testclasses"/>
    <property name="test.output" value="dist/test"/>
    <property name="javac.debug" value="true"/>
    <property name="sam-version" value="1.22"/>
    <property name="picard-version" value="1.22"/>
    <property name="command_tmp" value=".command_tmp"/>
    <property name="command-line-html-dir" value="${dist}/html"/>

    <property environment="env"/>

    <!-- Tortuous way to set JAVA_HOME_1_5 property to JAVA_HOME_1_5 environment variable if it exists,
     else set it to JAVA_HOME -->
    <condition property="java_home_1.5_exists">
        <isset property="env.JAVA_HOME_1_5"/>
    </condition>
    <target name="set_java_home_1.5_correctly" if="java_home_1.5_exists">
        <property name="JAVA_HOME_1_5" value="${env.JAVA_HOME_1_5}"/>
    </target>
    <target  name="set_java_home_1.5_to_default_java_home" unless="java_home_1.5_exists">
        <!-- Note that ${java.home} doesn't work on Linux - it points to the jre
        subdirectory, and there is no javac there -->
        <property name="JAVA_HOME_1_5" value="${env.JAVA_HOME}"/>
        <echo message="JAVA_HOME_1_5=${JAVA_HOME_1_5}"/>
    </target>
    <target  name="set_java_home_1.5" depends="set_java_home_1.5_correctly, set_java_home_1.5_to_default_java_home"/>

<!-- INIT -->
    <target name="init">
        <path id="classpath">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

<!-- CLEAN -->
    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${classes.test}"/>
        <delete dir="${test.output}"/>
        <delete  dir="${dist}"/>
        <delete  dir="${command_tmp}"/>
        <delete  dir="javadoc"/>
    </target>

<!-- COMPILE -->
    <target name="compile" depends="compile-src, compile-tests"
            description="Compile files without cleaning">
    </target>

    <target name="compile-src" depends="compile-sam-jdk, compile-picard" description="Compile files without cleaning"/>

    <target name="compile-sam-jdk" depends="init, set_java_home_1.5" description="Compile sam-jdk files without cleaning">
        <mkdir dir="${classes}"/>
        <!-- force SAM-JDK to be built with 1.5 -->
        <!-- complain if net.sf.picard code is referenced -->
        <javac destdir="${classes}"
               optimize="${javac.opt}"
               debug="${javac.debug}"
               sourcepath="" srcdir="${src}"
               includes ="net/sf/samtools/**/*.*"
               excludes = "net/sf/picard/**/*.*"
               executable="${JAVA_HOME_1_5}/bin/javac"
               compiler="javac1.5" fork="true">
            <!--<compilerarg value="-Xlint:all"/>-->
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="compile-picard" depends="init" description="Compile picard files without cleaning">
        <mkdir dir="${classes}"/>
        <javac destdir="${classes}"
               optimize="${javac.opt}"
               excludes ="net/sf/samtools/**/*.*"
               debug="${javac.debug}">
            <!--<compilerarg value="-Xlint:all"/>-->
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src}"/>
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="compile-tests" depends="compile-sam-jdk-tests, compile-picard-tests" description="Compile test files without cleaning"/>

    <target name="compile-sam-jdk-tests" depends="init, set_java_home_1.5" description="Compile sam-jdk test files without cleaning">
        <mkdir dir="${classes.test}"/>
        <javac destdir="${classes.test}"
               optimize="${javac.opt}"
               debug="${javac.debug}"
               includes ="net/sf/samtools/**/*.*"
               executable="${JAVA_HOME_1_5}/bin/javac"
               compiler="javac1.5" fork="true"> <!-- Force SAM-JDK to be built with 1.5 -->
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src.test}"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes}"/>
            </classpath>
        </javac>
    </target>

    <target name="compile-picard-tests" depends="init" description="Compile picard test files without cleaning">
        <mkdir dir="${classes.test}"/>
        <javac destdir="${classes.test}"
               optimize="${javac.opt}"
               excludes ="net/sf/samtools/**/*.*"
               debug="${javac.debug}">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
            <src path="${src.test}"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes}"/>
            </classpath>
        </javac>
    </target>

<!-- TEST -->
    <target name="test" depends="compile" description="Run unit tests">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <testng suitename="picard-tests" classpathref="classpath" outputdir="${test.output}"
                failureproperty="tests.failed" excludedgroups="slow" workingDir="${basedir}">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                 <include name="**/Test*.class"/>
                 <include name="**/*Test.class"/>
            </classfileset>
            <jvmarg value="-Xmx1G"/>
        </testng>
        <fail if="tests.failed" message="There were failed unit tests"/>
    </target>

    <target name="single-test"
            depends="compile, compile-tests"
            description="Compile and run a single test.">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <fail unless="name" message="Please provide input test: -Dname=..." />
        <testng suitename="samtools-single-test" classpathref="classpath" outputdir="${test.output}">
            <jvmarg line="-Xmx512M"/>
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/${name}.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="sam-jar" depends="compile-sam-jdk"
            description="Builds sam-${sam-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/sam-${sam-version}.jar" compress="no">
            <fileset dir="${classes}" includes ="net/sf/samtools/**/*.*"/>
        </jar>
    </target>

    <target name="picard-jar" depends="compile"
            description="Builds picard-${picard-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/picard-${picard-version}.jar" compress="no">
            <fileset dir="${classes}" includes ="net/sf/picard/**/*.*"/>
        </jar>
    </target>

    <target name="javadoc" depends="init" description="Generates the project javadoc.">
        <javadoc
           sourcepath="${src}"
           destdir="javadoc"
           packagenames="net.sf.samtools.*, net.sf.picard.*"
           windowtitle="SAM JDK API Documentation"
           doctitle="&lt;h1&gt;SAM JDK API Documentation&lt;/h1&gt;"
           author="true"
           protected="true"
           use="true"
           version="true">
          <classpath location="${java.home}/../lib/tools.jar"/>
          <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
          </javadoc>
        </target>

    <target name="package-commands" depends="compile">
        <delete dir="${command_tmp}"/>

        <mkdir dir="${command_tmp}"/>
        <copy todir="${command_tmp}">
            <fileset dir="${classes}" includes="**/*"/>
        </copy>

        <delete dir="${command-line-html-dir}"/>

        <!-- The order of these elements determines the order they appear in the on-line help -->
        <package-command main-class="net.sf.picard.sam.ValidateSamFile" title="ValidateSamFile"/>
        <package-command main-class="net.sf.picard.sam.SortSam" title="SortSam"/>
        <package-command main-class="net.sf.picard.sam.MarkDuplicates" title="MarkDuplicates"/>
        <package-command main-class="net.sf.picard.sam.EstimateLibraryComplexity" title="EstimateLibraryComplexity"/>
        <package-command main-class="net.sf.picard.sam.MergeSamFiles" title="MergeSamFiles"/>
        <package-command main-class="net.sf.picard.sam.ViewSam" title="ViewSam"/>
        <package-command main-class="net.sf.picard.sam.ReplaceSamHeader" title="ReplaceSamHeader"/>
        <package-command main-class="net.sf.picard.sam.SamToFastq" title="SamToFastq"/>
        <package-command main-class="net.sf.picard.sam.FastqToSam" title="FastqToSam"/>
        <package-command main-class="net.sf.picard.sam.SamFormatConverter" title="SamFormatConverter"/>
        <package-command main-class="net.sf.picard.sam.CreateSequenceDictionary" title="CreateSequenceDictionary"/>
        <package-command main-class="net.sf.picard.sam.CleanSam" title="CleanSam"/>
        <package-command main-class="net.sf.picard.sam.CompareSAMs" title="CompareSAMs"/>
        <package-command main-class="net.sf.picard.util.BuildBamIndex" title="BuildBamIndex"/>
        <package-command main-class="net.sf.picard.util.BaiToText" title="BaiToText"/>
        <package-command main-class="net.sf.picard.fastq.BamToBfq" title="BamToBfq"/>
        <package-command main-class="net.sf.picard.analysis.directed.CalculateHsMetrics" title="CalculateHsMetrics"/>
        <package-command main-class="net.sf.picard.analysis.MeanQualityByCycle" title="MeanQualityByCycle"/>
        <package-command main-class="net.sf.picard.analysis.QualityScoreDistribution" title="QualityScoreDistribution"/>
        <package-command main-class="net.sf.picard.analysis.CollectAlignmentSummaryMetrics" title="CollectAlignmentSummaryMetrics"/>
        <package-command main-class="net.sf.picard.analysis.CollectGcBiasMetrics" title="CollectGcBiasMetrics"/>
        <package-command main-class="net.sf.picard.analysis.CollectInsertSizeMetrics" title="CollectInsertSizeMetrics"/>
        <package-command main-class="net.sf.picard.sam.FixMateInformation" title="FixMateInformation"/>
        <package-command main-class="net.sf.picard.sam.RevertSam" title="RevertSam"/>
        <package-command main-class="net.sf.picard.sam.MergeBamAlignment" title="MergeBamAlignment"/>
	<package-command main-class="net.sf.picard.reference.NormalizeFasta" title="NormalizeFasta"/>
    </target>

<!-- ALL -->
    <target name="all" depends="compile, sam-jar, picard-jar, package-commands" description="Default build target">
        <zip zipfile="${dist}/picard-tools-${picard-version}.zip">
            <zipfileset dir="${dist}" includes="*.jar" prefix="picard-tools-${picard-version}"/>
        </zip>
    </target>

    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->
    <!-- Beginning of taskdefs that are used elsewhere in the build file                        -->
    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->

    <!-- Create a jar for a command-line class so it can be run java -jar jarfile -->
    <macrodef name="package-command">
        <attribute name="main-class"/>
        <attribute name="title"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <classfileset dir="${command_tmp}" id="reqdClasses">
                <root classname="@{main-class}"/>
            </classfileset>
            <jar destfile="${dist}/@{title}.jar">
                <fileset  refid="reqdClasses"/>
                <manifest>
                    <attribute name="Implementation-Title" value="@{title}"/>
                    <attribute name="Main-Class" value="@{main-class}"/>
                </manifest>
            </jar>

            <!-- For Sourceforge project website -->
            <mkdir dir="${command-line-html-dir}/program_usage"/>

            <!-- Generate HTML for each command -->
            <java classname="net.sf.picard.cmdline.CreateHtmlDocForProgram"
                  output="${command-line-html-dir}/program_usage/@{title}.shtml"
                  failonerror="true">
                <classpath>
                    <pathelement location="${dist}/picard-${picard-version}.jar"/>
                    <pathelement location="${dist}/sam-${sam-version}.jar"/>
                </classpath>
                <arg value="@{main-class}"/>
            </java>

            <!-- Generate links to each command -->
            <echo file="${command-line-html-dir}/command-line-sidebar.shtml" append="true"
                  message="&lt;li>&lt;a href=&quot;command-line-overview.shtml#@{title}&quot;>@{title}&lt;/a>${line.separator}"/>

            <!-- include usage for each command -->
            <echo  file="${command-line-html-dir}/command-line-usage.shtml" append="true"
                    message="&lt;!--#include virtual=&quot;@{title}.shtml&quot; -->${line.separator}"/>
        </sequential>
    </macrodef>

</project>
